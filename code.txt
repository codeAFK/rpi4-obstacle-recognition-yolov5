main.py
import threading
import RPi.GPIO as GPIO
import os
import time
import cv2
import pyttsx3
import config as config  # ✅ Import stop_threads from config
from yolo import yolo_detection
from sensor import ultrasonic_detection

def announce_startup():
    os.environ['PULSE_SERVER'] = 'tcp:localhost:4713'  # Adjust as necessary
    tts_engine = pyttsx3.init()
    tts_engine.setProperty('voice', 'english')  # Set the voice if needed
    tts_engine.say("Startup sequence initiated. Please stand by.")
    tts_engine.runAndWait()

announce_startup()

def run_yolo_detection():
    while not config.stop_threads:  # ✅ Use config.stop_threads
        if not yolo_detection():
            break

def run_ultrasonic_detection():
    while not config.stop_threads:
        ultrasonic_detection()

def main():
    yolo_thread = threading.Thread(target=run_yolo_detection)
    ultrasonic_thread = threading.Thread(target=run_ultrasonic_detection)

    yolo_thread.start()
    ultrasonic_thread.start()

    try:
        while True:
            time.sleep(1)  # Keep the main thread running
    except KeyboardInterrupt:
        print("Exiting...")
        config.stop_threads = True  # ✅ Stop all threads

        yolo_thread.join()
        ultrasonic_thread.join()

        cv2.destroyAllWindows()
        GPIO.cleanup()

if __name__ == "__main__":
    main()


yolo.py
import cv2
import time
import torch
from pathlib import Path
import pyttsx3  # Text-to-Speech library
from picamera2 import Picamera2
import config  # Import stop_threads

# Load YOLOv5 model (ensure you have the YOLOv5 repo installed)
model = torch.hub.load(str(Path('/home/aiguide/Documents/yolov5').resolve()), 'custom', path='/home/aiguide/Documents/best.pt', source='local')
model.to(torch.device('cpu'))  # Ensure it runs on CPU
torch.backends.cudnn.benchmark = False  # Disable CUDA optimizations

# Initialize camera
picam2 = Picamera2()
picam2.configure(picam2.create_still_configuration())
picam2.start()

# Text-to-Speech setup
tts_engine = pyttsx3.init()
tts_engine.setProperty('rate', 150)  # Adjust speaking speed

# Parameters
FRAME_WIDTH = 640
FRAME_HEIGHT = 480
CONFIDENCE_THRESHOLD = 0.60  # Min confidence for object detection
ALERT_COOLDOWN = 3  # Seconds between alerts
last_alert_time = 0  # Store last alert time

def yolo_detection():
    global last_alert_time

    if config.stop_threads:
        return False  

    frame = picam2.capture_array()
    frame = cv2.cvtColor(frame, cv2.COLOR_RGB2BGR)
    frame = cv2.resize(frame, (FRAME_WIDTH, FRAME_HEIGHT))

    # Perform inference
    results = model(frame)

    closest_object = None
    max_box_size = 0

    for result in results.xyxy[0]:  # Iterate through detected objects
        x1, y1, x2, y2, conf, cls = result.tolist()

        if conf < CONFIDENCE_THRESHOLD:
            continue  

        box_size = (x2 - x1) * (y2 - y1)

        # Select the largest bounding box (assumed closest object)
        if box_size > max_box_size:
            max_box_size = box_size
            closest_object = model.names[int(cls)]  # Get object name

        # Draw bounding box
        label = f"{model.names[int(cls)]} {conf:.2f}"
        cv2.rectangle(frame, (int(x1), int(y1)), (int(x2), int(y2)), (0, 255, 0), 2)
        cv2.putText(frame, label, (int(x1), int(y1) - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)

    # Announce closest object if it meets size criteria
    if closest_object and max_box_size > 15000:
        current_time = time.time()
        if current_time - last_alert_time > ALERT_COOLDOWN:
            alert_user(closest_object)
            last_alert_time = current_time  # Update cooldown timer

    #cv2.imshow("Obstacle Detection", frame)

    if cv2.waitKey(1) & 0xFF == ord('q'):
        return False  

    return True

def alert_user(object_name):
    """Announces the detected object using text-to-speech."""
    message = f"Warning! {object_name} detected ahead."
    print("[ALERT]:", message)

    tts_engine.say(message)
    tts_engine.runAndWait()


sensor.py
import RPi.GPIO as GPIO
import time
import config  # ✅ Import stop_threads from config

# Sensor 1
TRIG_1 = 23  # Pin 16
ECHO_1 = 8   # Pin 24
MOTOR_SIG_1 = 18  # Pin 12

# Sensor 2
TRIG_2 = 24  # Pin 18
ECHO_2 = 25  # Pin 22
MOTOR_SIG_2 = 12  # Pin 32

GPIO.setmode(GPIO.BCM)

# Set up Sensor 1
GPIO.setup(TRIG_1, GPIO.OUT)
GPIO.setup(ECHO_1, GPIO.IN)
GPIO.setup(MOTOR_SIG_1, GPIO.OUT)

# Set up Sensor 2
GPIO.setup(TRIG_2, GPIO.OUT)
GPIO.setup(ECHO_2, GPIO.IN)
GPIO.setup(MOTOR_SIG_2, GPIO.OUT)

# Initialize motors
motor_1 = GPIO.PWM(MOTOR_SIG_1, 100)
motor_2 = GPIO.PWM(MOTOR_SIG_2, 100)

motor_1.start(0)
motor_2.start(0)

def get_distance(trig, echo):
    """Measures distance for a given ultrasonic sensor."""
    GPIO.output(trig, True)
    time.sleep(0.00001)
    GPIO.output(trig, False)

    start_time = time.time()
    timeout = start_time + 0.1  
    while GPIO.input(echo) == 0:
        start_time = time.time()
        if time.time() > timeout:
            return -1  

    stop_time = time.time()
    while GPIO.input(echo) == 1:
        stop_time = time.time()
        if time.time() > timeout:
            return -1  

    elapsed_time = stop_time - start_time
    distance = (elapsed_time * 34300) / 2  
    return round(distance, 1)

def control_motor(distance, motor):
    """Controls vibration motor based on distance."""
    if distance < 10:
        duty_cycle = 100
    elif distance < 30:
        duty_cycle = 75
    elif distance < 50:
        duty_cycle = 50
    elif distance < 70:
        duty_cycle = 25
    else:
        duty_cycle = 0

    motor.ChangeDutyCycle(duty_cycle)

def ultrasonic_detection():
    """Runs both sensors in a loop."""
    while not config.stop_threads:  
        dist_1 = get_distance(TRIG_1, ECHO_1)
        dist_2 = get_distance(TRIG_2, ECHO_2)

        control_motor(dist_1, motor_1)
        control_motor(dist_2, motor_2)

        time.sleep(0.1)


config.py
# config.py
stop_threads = False  # Shared global variable
